heat_template_version: 2016-10-14

description: >
  pulls GATK Docker image. Adds "Sensitively detect copy ratio alterations and allelic segments" tutorial and the corresponding data.

parameters:
  key_name:
    type: string
    default: HEAT_KEY
    description: Name of an existing (on the csc) key pair to use for the instance
  jupyter_token:
    type: string
    default: 'demo-interactive'
    description: Jupyer token string, which can be used to access the container
  flavor:
    description: https://research.csc.fi/pouta-flavours for more info on flavors. io for spark/hadoop. Standard for webstuff and db, as cpu is overcommited (32 physical cores are used to provide more than 32 virtual cores). For computations use hpc flavors. 
    type: string
    default: hpc.4.5core
    constraints: 
      - allowed_values:
        - standard.tiny
        - standard.small
        - standard.medium
        - standard.large
        - standard.xlarge
        - standard.xxlarge
        - gpu.1.1gpu
        - gpu.1.2gpu
        - hpc-gen2.24core
        - hpc-gen2.48core
        - hpc.4.5core
        - hpc.4.20core
        - hpc.4.10core
        - hpc.4.40core
        - io.70GB
        - io.160GB
        - io.340GB
        - io.700GB

  image:
    type: string
    default: Ubuntu-16.04
    constraints: 
      - allowed_values:
        - Ubuntu-16.04
        - Ubuntu-16.04-Cuda
        - cirros
  notebook:
    description: available are here https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html#jupyter-datascience-notebook
    type: string
    default: "spacecade7/tutorial_11682_11683:gatk4.0.1.1"
    constraints:
      - allowed_values:
        - broadinstitute/gatk
        - spacecade7/tutorial_11682_11683:gatk4.0.1.1

  existing_volume:
    description: >
      attaches an existing volume. Default is 50 Gb file with RDKit stuff
      Make sure the new volume is formatted before use. 
      sudo -umount (output of sudo parted -l)
    type: string
    default: b6f84586-aa6c-4782-9826-99606f284379
    constraints:
      - allowed_values:
        - b6f84586-aa6c-4782-9826-99606f284379
        - 60cfa2f8-ae90-4edb-a7a0-0b873851b8c0

  size:
    description: size of the volume in Gb to be created for storing data. For now the volume is being destroyed after the stack is destroed, ie it ephemeral. In practice, it would make a lot more sense to be able save it.
    type: number
    default: 10
    constraints:
      - range: { min: 1, max: 888}



resources:


  # this creates a new volume
  new_vol:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: size }

        
# sudo mkfs.ext4 ${some_input}
# sudo mkdir -p /media/volume
# sudo mount ${some_input} /media/volume
# sudo mkdir -p /media/volume/IT_WORKED && sudo chown -R $USER /media/volume/IT_WORKED

  # this creates a new volume


  # this create a floating ip 
  floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: public

  # this associates security groups to the port
  instance_port:
    type: OS::Neutron::Port
    properties:
      network: project_2000774
      security_groups:
        - default
        - SSH
        - Jupyter

  # this creates a key-pair
  #my_key:
  #  type: OS::Nova::KeyPair
  #  properties:
  #    save_private_key: true
  #    name: my_key  

  default_instance:
    # this creates the actual instance
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image}
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: instance_port }
      user_data_format: RAW
      user_data:
        # https://docs.openstack.org/heat/newton/template_guide/hot_spec.html#str-replace
        # https://webcache.googleusercontent.com/search?q=cache:IVrJbDeZ344J:https://www.cowley.tech/blog/2015/05/05/identify-and-mounting-cinder-volumes-in-openstack-heat/+&cd=1&hl=en&ct=clnk&gl=fi&client=safari
        # -e option for passwords obtained from https://hub.docker.com/r/vhtec/jupyter-docker/ and from https://blog.ouseful.info/2019/02/05/on-not-faffing-around-with-jupyter-docker-container-auth-tokens/
        # let's have all the external to script variables written out as "%variable%"
        str_replace:
          template: |
            #cloud-config
            write_files:
              - content: |
                  #!/bin/bash
                  set -xv
                  mkdir -pv /media/input
                  voldata_id1="%voldata_id1%"
                  voldata_dev1="/dev/disk/by-id/virtio-$(echo ${voldata_id1} | cut -c -20)"
                  mount ${voldata_dev1} /media/input
                  chmod a+rwx -R /media/input
                  mkdir -pv /media/temp
                  mkfs.ext4 /dev/vdb
                  mount /dev/vdb /media/temp
                  chmod a+rwx -R /media/temp
                  cd /media/temp            
                  curl -fsSL https://get.docker.com -o get-docker.sh
                  sh get-docker.sh
                  wait
                  NOTEBOOK="%notebook%"
                  sudo usermod -aG docker $USER
                  sudo docker pull ${NOTEBOOK}
                path: /tmp/format-disks
                permissions: '0700'
            runcmd:
              - /tmp/format-disks            
          params:
            "%voldata_id1%": { get_param: existing_volume }
            "%voldata_id%": { get_resource: new_vol }

            "%notebook%": { get_param: notebook }

  volume_attachment_new:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: new_vol }
      instance_uuid: { get_resource: default_instance } 




  volume_attachment_old:
    description: this should contain input data for whatever calculation to be run from DrugComb
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_param: existing_volume }
      instance_uuid: { get_resource: default_instance }
#      mountpoint: /dev/vdc # mountpoint does not work. It assigns it at random
# https://ask.openstack.org/en/question/81702/nova-volume-attach-with-device-option-not-honoring-given-device-name/

  
  association:
    # this associates floating ip with the created instance
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: default_instance }

outputs:
#  private_key: 
#    description: Private key
#    value: { get_attr: [ my_key, private_key ] }
  instance_ip:
    description: Floating IP to be used for ssh'ing to the box
    value: { get_attr: [default_instance, networks, project_2000774, 1] }
  ssh_command:
    description: SSH command for the newly created instance (assuming your key is in ~/.ssh/). The keys are generated using -> openstack keypair create HEAT_KEY > ~/.ssh/HEAT_KEY.private

    value:
        str_replace:
            template: ssh cloud-user@host -i ~/.ssh/key.private
            params:
                host: { get_attr: [default_instance, networks, project_2000774, 1] }
                key: { get_param: key_name }



